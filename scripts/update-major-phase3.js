// update-major-phase3.js
const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîç Pr√©paration de la mise √† jour des d√©pendances critiques (Phase 3)...');

// Packages critiques qui n√©cessitent plus d'attention
const phase3Packages = {
  "expo-router": "~5.0.4",
  "react": "19.0.0",
  "react-dom": "19.0.0",
  "react-native": "0.79.2"
};

/**
 * Fonction qui installe les packages de la phase 3
 */
async function installPhase3Packages() {
  const packagesToInstall = Object.entries(phase3Packages)
    .map(([pkg, version]) => `${pkg}@${version}`)
    .join(' ');

  console.log(`\n‚ö†Ô∏è PHASE 3: Installation des packages critiques`);
  console.log(`üìã Packages √† installer: ${packagesToInstall}`);
  
  try {
    console.log('\n‚ö†Ô∏è ATTENTION: Cette mise √† jour peut n√©cessiter des ajustements significatifs dans votre code.');
    console.log('‚ö†Ô∏è Assurez-vous d\'avoir sauvegard√© votre projet et/ou utilis√© git avant de continuer.');
    console.log('\n‚è≥ Installation en cours...');
    
    execSync(`npm install ${packagesToInstall} --save --legacy-peer-deps`, { 
      stdio: 'inherit',
      cwd: path.join(__dirname, '..')
    });
    
    console.log(`\n‚úÖ Installation des packages critiques termin√©e!`);
    
    return true;
  } catch (error) {
    console.error(`\n‚ùå Erreur lors de la Phase 3:`, error.message);
    return false;
  }
}

/**
 * V√©rifications post-installation et instructions
 */
function showPostUpdateInstructions() {
  console.log('\nüìã INSTRUCTIONS APR√àS LA MISE √Ä JOUR:');
  console.log('1. Assurez-vous de v√©rifier les fichiers suivants pour les incompatibilit√©s:');
  console.log('   - app/_layout.tsx et autres fichiers utilisant expo-router');
  console.log('   - Composants utilisant React 19 (nouveaux hooks, etc.)');
  console.log('   - V√©rifiez les avertissements de d√©pr√©ciation dans la console');
  console.log('\n2. Nettoyez le cache Metro avant de lancer l\'application:');
  console.log('   npm run start-clean');
  console.log('\n3. Si vous rencontrez des erreurs, vous pouvez:');
  console.log('   - Restaurer le fichier package.json.backup');
  console.log('   - Ex√©cuter npm install pour revenir √† l\'√©tat pr√©c√©dent');
}

/**
 * Fonction principale
 */
async function updatePhase3() {
  console.log('üöÄ PHASE 3: MISE √Ä JOUR DES PACKAGES CRITIQUES');
  
  // V√©rification de la sauvegarde
  const backupPath = path.join(__dirname, '..', 'package.json.backup');
  if (!fs.existsSync(backupPath)) {
    console.log('‚ö†Ô∏è Aucune sauvegarde de package.json trouv√©e!');
    console.log('‚ö†Ô∏è Veuillez ex√©cuter npm run update-major-deps avant cette √©tape.');
    return;
  }
  
  const success = await installPhase3Packages();
  
  if (success) {
    showPostUpdateInstructions();
  } else {
    console.log('\n‚ö†Ô∏è La mise √† jour a √©chou√©. Vous pouvez:');
    console.log('1. Restaurer le fichier package.json.backup');
    console.log('2. Ex√©cuter npm install pour revenir √† l\'√©tat pr√©c√©dent');
  }
}

// Ex√©cution de la fonction principale
updatePhase3().catch(console.error);